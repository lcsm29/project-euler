# Solution of;
# Project Euler Problem 2: Even Fibonacci numbers
# https://projecteuler.net/problem=2
#
# Each new term in the Fibonacci sequence is generated by adding the previous 
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not 
# exceed four million, find the sum of the even-valued terms.
#
# by lcsm29 http://github.com/lcsm29/project-euler
import timed


def fn_iterative(n):
    a, b = 1, 2
    sum_even = 2
    while 1:
        a, b = b, a+b
        if b > n:
            return sum_even
        if b % 2 == 0:
            sum_even += b

''' recursiv esolution added and then immediately removed due to its slow speed
from functools import lru_cache
import sys
sys.setrecursionlimit(1000)
@lru_cache
def fn_recursive(n):
    if n <= 1:
        return 2
    else:
        return 4 * fn_recursive(n - 1) + fn_recursive(n - 2)
'''

if __name__ == '__main__':
    n = 4_000_000
    i = 500_000
    prob_id = 2
    timed.caller(fn_iterative, n, i, prob_id)
    # timed.caller(fn_recursive, n, i, prob_id)
